@page "/blazor/mapbox"
@page "/blazor/mapbox/{containerId}"
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.SignalR.Client
@using kriefTrackAiApi.Infrastructure.Services
@inject IJSRuntime JS
@inject HttpClient Http
@inject TokenService TokenService
@inject NavigationManager Navigation
@inject IWebHostEnvironment Env
@inject IConfiguration Config
@using System.Text.Json

@* <h2>Blazor Mapbox Demo</h2> *@
@* @if (string.IsNullOrEmpty(containerId))
{
    <p style="color: gray;">No container selected. Showing empty map.</p>
} *@
<style>
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #map {
        position: absolute;
        top: 0;
        left: 0;
        height: 100vh;
        width: 100vw;
    }

    .spinner-overlay {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(20%, -50%);
            z-index: 999;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 1rem 2rem;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 500;
            color: #555;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            transition: all 0.6s ease-in-out;
            pointer-events: none;
        }
</style>

<div id="map"></div>

@if (IsPrerendering && _geoJson != "{}")
{
    <script>
        window.__geojsonFromSSR = @JsonEncodedText.Encode(_geoJson).ToString();
        window.__mapboxTokenFromSSR = "@_mapboxToken";
    </script>
}
else if (IsPrerendering && string.IsNullOrEmpty(containerId))
{
    <script>
        window.__geojsonFromSSR = "{}";
        window.__mapboxTokenFromSSR = "@_mapboxToken";
    </script>
}

@if (!IsPrerendering)
{
    <div class="spinner-overlay" style="@_loaderStyle">
        <h1>Loading map...</h1>
    </div>
}



@code {
    [Parameter]
    public string containerId { get; set; } = string.Empty;
    [CascadingParameter] public bool IsPrerendering { get; set; }

    private HubConnection? _hubConnection;
    private string _geoJson = "{}";
    private bool _geoJsonFetched = false;
    private string? _mapboxToken;
    private string _loaderStyle = "";


    protected override void OnInitialized()
    {
        _mapboxToken = Config["Mapbox:Token"]
        ?? throw new ArgumentNullException("Mapbox:Token is missing from configuration");
    }
    protected override async Task OnParametersSetAsync()
    {
        if (!IsPrerendering && !string.IsNullOrEmpty(containerId) && !_geoJsonFetched)
        {
            Console.WriteLine("Client Fetch (OnParametersSetAsync)");
            _geoJson = await GetContainerGeoJsonAsync(containerId);
            _geoJsonFetched = true;
        }
    }

   protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender && !IsPrerendering)
    {
        if (!_geoJsonFetched && !string.IsNullOrEmpty(containerId))
        {
            Console.WriteLine("Client Fetch (OnAfterRenderAsync)");
            _geoJson = await GetContainerGeoJsonAsync(containerId);
            _geoJsonFetched = true;
        }

        await JS.InvokeVoidAsync("initMapbox", _mapboxToken, _geoJson);

        if (!string.IsNullOrEmpty(containerId))
        {
            await InitSignalR();
        }

        _loaderStyle = "opacity: 0; z-index: -1;";
        StateHasChanged();
    }
}



    private async Task InitSignalR()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/trackingHub"))
        .Build();

        _hubConnection.On<string>("RefreshMapData", async (containerIdFromServer) =>
        {
            if (containerIdFromServer == containerId)
            {
                Console.WriteLine("Refreshing map via SignalR");
                _geoJson = await GetContainerGeoJsonAsync(containerId);
                await JS.InvokeVoidAsync("initMapbox", _mapboxToken, _geoJson);
            }
        });

        await _hubConnection.StartAsync();
    }

    private async Task<string> GetContainerGeoJsonAsync(string containerId)
    {
        Console.WriteLine($"Fetching GeoJSON for container {containerId}");

        string token = await TokenService.GetGraphQLTokenAsync();
        if (string.IsNullOrEmpty(token))
        {
            Console.Error.WriteLine("Failed to retrieve token.");
            return "{}";
        }

        Http.DefaultRequestHeaders.Authorization =
        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var queryObject = new
        {
            query = @"query Query($shipmentGeoJsonId: ObjectId!) {
shipmentGeoJSON(id: $shipmentGeoJsonId)
}",
            variables = new { shipmentGeoJsonId = containerId }
        };

        var json = System.Text.Json.JsonSerializer.Serialize(queryObject);
        var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

        try
        {
            var response = await Http.PostAsync("https://graphql.wnwd.com/", content);
            var result = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Raw GeoJSON Result:");
                return result;
            }

            Console.Error.WriteLine($"Failed to fetch GeoJSON. Status: {response.StatusCode}");
            return "{}";
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Exception fetching GeoJSON: {ex.Message}");
            return "{}";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
